<?php
	// Check to make sure all the required fields are in the $_POST array,
	//	which also checks to make sure the form was used to access this page.
	$required_fields = ["apikey", "mind", "soul", "time", "power", "space", "reality"];
	$error = false;
	foreach($required_fields as $field)
	{
		// isset() checks if the name was found, strlen(trim()) checks for
		// empty fields (whitespace only)
		if(!isset($_POST[$field]) || strlen(trim($_POST[$field])) == 0)
			$error = true;
	}
 ?>
<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>Intercept page</title>
	<link href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
	<link rel="stylesheet" type="text/css" href="../css/styles.css">
</head>
<body>

	<?php
	if($error)
	{
		echo("<p>Sorry, please go back and enter all fields.</p>");
		exit();
	}
	$apikey = trim($_POST["apikey"]);
	if($apikey !== "abc123")
	{
	echo("<p>Sorry, your API key contains invalid characters.</p>");
	exit();
	}

	else
	{
		// NOTE: In production code you would do rigorous
		// validation checking here.
		$mind = trim($_POST["mind"]);
		$soul = trim($_POST["soul"]);
		$time = trim($_POST["time"]);
		$power = trim($_POST["power"]);
		$space = trim($_POST["space"]);
		$reality = trim($_POST["reality"]);

		// We can do better than putting our db info directly in the
		// script! Consider using an include file outside the web root.
		$hostname = "itp258.czxnupc0qhwl.us-east-2.rds.amazonaws.com:3306";
		$username = "root";
		$password = "uheZuza2*";
		$dbname = "assgn15";
		$connection_string = "mysql:host=$hostname;dbname=$dbname";

		// connect to the database
		$connection = new PDO($connection_string, $username, $password);
		// set error code attribute to throw exceptions
		$connection->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

		// the question marks are placeholders in our prepared statement.
		// using prepared statements protects against SQL injection
		$sql = "INSERT INTO stones(mind, soul, time, power, space, reality)";
		$sql .= "VALUES(?, ?, ?, ?, ?, ?)";

		// Use try/catch for exception handling. All sorts of things could
		// go wrong and we need detailed error messages in development,
		// and the ability to gracefully fail in production.
		try
		{
			$statement = $connection->prepare($sql);
			$statement->execute(array($mind, $soul, $time, $power, $space, $reality));
			echo("<h1>Stuff inserted!</h1>");
		}
		catch(PDOException $e)
		{
			echo("<h1>Error!</h1><p>" . $e->getMessage() . "</p>");
		}
	}
	?>

	<a href="../apiadmin/index.html">Back</a>
</body>
</html>
